#!/usr/bin/bash

module unload gcc
module load gcc/11.1.0


## Run AAE with early stopping over Almeida
fastapath=/home/projects/cpr_10006/people/sira/projects/vamb/data/datasets/almeida/data/almeida.fa.gz

d='almeida'

date=210122
i=1
y=1000
alpha=0.15
epoch_i=70
run=aae_uc_sampling_cuda_no_eaarlystopping_y_"$y"_alpha_"$alpha"_"$date"_i_"$i"
run_tail=_s_l_0.00964_s_l_r_0.5_T_0.1596_hn_547_l_d_283_bs_256_lr_0.001_lrd_0.001_y_"$y"

###python3  aae_uc_sampling_cuda_earlystopping_any.py  -d "$d" -r $run  -e 50 --log -y "$y" -s 5 --alpha "$alpha"
run_e="$d"_"$run""$run_tail"_e_"$epoch_i".pth

#cp Models/"$d"/epochs/"$run_e" Models/"$d"/"$run_e"

##python3 latent_uc_checkpoint_mu.py -y "$y" --clust Y -m "$run_e" -d $d

##python3 aae_clustering_3.py -L Latents/"$d"/"$run_e"_mu_latents.npz -d $d --split
#
##python3 split_clusts.py -c  Clusters_Y/"$d"/"$run_e"_clusters.tsv  -d $d
#
clust_l=Clusters_3_split/"$d"/"$run_e"_mu_S_clusters.tsv
bins_l=Clusters_3_split/"$d"/bins/"$run_e"_mu_S
#
clust_y=Clusters_Y_split/"$d"/"$run_e"_S_clusters.tsv
bins_y=Clusters_Y_split/"$d"/bins/"$run_e"_S
#
##python3 create_fasta.py $fastapath $clust_l 200000 $bins_l
##python3 create_fasta.py  $fastapath $clust_y 200000 $bins_y

## Run dRep
#sh dRep_2_pipeline_al.sh -B $bins_l -b $bins_y  -T AAE_UC_v3 -t AAE_UC_Y  -o dRep/"$d"/AAE_UCv3Y_"$date"_y_"$y"_alpha_"$alpha"_"$epoch_i" -d "$d" -C s -c ss

sh dRep_2_Almeida.sh -B $bins_l -b $bins_y  -o dRep/"$d"/AAE_UCv3Y_"$date"_y_"$y"_alpha_"$alpha"_"$epoch_i"_030322_nc_0.8  -g ss
sh dRep_3_Almeida.sh -B $bins_l -b $bins_y -x Clusters_3_split/"$d"/bins/vamb_renamed  -o dRep/"$d"/AAE_UCv3Y_"$date"_y_"$y"_alpha_"$alpha"_vamb____"$epoch_i"_030322_nc_0.8  -g ss

#!/usr/bin/bash

#1. Rename bin files and cluster names
#2. generate genomeInfo file
#3. Split bins by sample into different folders
#4. run dRep for each sample

while getopts "B:b:o:g:" opt; do
  case $opt in
    B) B1=$OPTARG    ;;
    b) B2=$OPTARG    ;;
    o) O=$OPTARG      ;;
    g) G=$OPTARG      ;;
    *) echo 'error' >&2
       exit 1
  esac
done


#4. run dRep for each sample

name=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 5)

echo $name

ls $B1 > tmp/model_"$name"_1_samples
ls $B2  > tmp/model_"$name"_2_samples
#cat tmp/model_"$name"_2_samples

sort tmp/model_"$name"_1_samples tmp/model_"$name"_2_samples | uniq -d > tmp/int_"$name"_samples_12
#cat tmp/int_"$name"_samples_12
sort tmp/model_"$name"_1_samples tmp/model_"$name"_2_samples tmp/model_"$name"_2_samples | uniq -u  > tmp/uniq_"$name"_samples_1
sort tmp/model_"$name"_2_samples tmp/model_"$name"_1_samples tmp/model_"$name"_1_samples | uniq -u  > tmp/uniq_"$name"_samples_2

rm tmp/model_"$name"_*_samples

mkdir -p $O

############################# Run dRep over bins from samples generated by all methods, i.e. samples intersection set
i=0
while read -r s
do
run_id="$O"_"$name"_int
#echo -e "dRep dereplicate -p 20 -d $O/"$s" -g {$B1/$s/*.fna,$B2/$s/*.fna} --genomeInfo $G    -comp 90 -con 5 -sa 0.9999 " >> tmp/model_"$name"_"$i".sh
echo -e "dRep dereplicate -nc 0.8  -p 25 -d $O/"$s" -g {$B1/$s/*.fna,$B2/$s/*.fna}    -comp 90 -con 5 -sa 0.9999 " >> tmp/model_"$name"_"$i".sh
samples_num=$(less tmp/model_"$name"_"$i".sh | wc -l )
if [ "$samples_num" -ge 5 ]; then
    # add a command to remove the tmp/model_name_i.sh file so we do not flood the tmp
    echo -e "rm tmp/model_"$name"_"$i".sh" >> tmp/model_"$name"_"$i".sh
    echo -e "sh tmp/model_"$name"_"$i".sh" | qsub -d `pwd` -l nodes=1:ppn=25,mem=50gb,walltime=02:10:00:00 -r y -N $run_id -e Out/$run_id.err -o Out/$run_id.out -A cpr_10006 -W group_list=cpr_10006
    let i++
fi
done < tmp/int_"$name"_samples_12

rm  tmp/int_"$name"_samples_12

# add a command to remove the tmp/model_name_i.sh file so we do not flood the tmp
echo -e "rm tmp/model_"$name"_"$i".sh" >> tmp/model_"$name"_"$i".sh

echo -e "sh tmp/model_"$name"_"$i".sh" | qsub -d `pwd` -l nodes=1:ppn=25,mem=50gb,walltime=02:10:00:00 -r y -N $run_id -e Out/$run_id.err -o Out/$run_id.out -A cpr_10006 -W group_list=cpr_10006


########################### Run dRep over bins from samples generated only by method 1
while read -r s
do

#echo -e "dRep dereplicate -p 20 -d $O/$s -g $B1/$s/*.fna --genomeInfo $G  -comp 90 -con 5 -sa 0.9999 " >> model_1_uniq.sh
echo -e "dRep dereplicate  -nc 0.8   -p 25 -d $O/$s -g $B1/$s/*.fna  -comp 90 -con 5 -sa 0.9999 " >> tmp/model_"$name"_1_uniq.sh

echo -e "rm model_"$name"_1_uniq.sh" >> tmp/model_"$name"_1_uniq.sh
done < tmp/uniq_"$name"_samples_1

rm tmp/uniq_"$name"_samples_1

run_id="$O"_"$name"_model_1_uniq

echo -e "sh tmp/model_"$name"_1_uniq.sh" | qsub -d `pwd` -l nodes=1:ppn=20,mem=30gb,walltime=02:10:00:00 -r y -N $run_id -e Out/$run_id.err -o Out/$run_id.out -A cpr_10006 -W group_list=cpr_10006

########################### Run dRep over bins from samples generated only by method 2
while read -r s
do
#echo -e "dRep dereplicate -p 20 -d $O/$s -g $B2/$s/*.fna --genomeInfo $G  -comp 90 -con 5 -sa 0.9999 "  >> model_2_uniq.sh
echo -e "dRep dereplicate -nc 0.8 -p 25 -d $O/$s -g $B2/$s/*.fna  -comp 90 -con 5 -sa 0.9999 "  >> tmp/model_"$name"_2_uniq.sh

echo -e "rm tmp/model_"$name"_2_uniq.sh" >> tmp/model_"$name"_2_uniq.sh
done < tmp/uniq_"$name"_samples_2

rm tmp/uniq_"$name"_samples_2

run_id="$O"_"$name"_model_2_uniq

echo -e "sh tmp/model_"$name"_2_uniq.sh" | qsub -d `pwd` -l nodes=1:ppn=20,mem=30gb,walltime=02:10:00:00 -r y -N $run_id -e Out/$run_id.err -o Out/$run_id.out -A cpr_10006 -W group_list=cpr_10006